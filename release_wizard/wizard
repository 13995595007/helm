#!/usr/bin/env python3

import argparse
import subprocess
import os
import sys
import ruamel.yaml
import semantic_version


def main():
    args = parse_args()

    frappe_version = git_version('frappe', args.version)
    erpnext_version = git_version('erpnext', args.version)
    chart_dict = update_chart(erpnext_version, args.bump_type)
    chart_version = chart_dict['version']
    update_values(frappe_version, erpnext_version)
    git_check_branch()
    git_commit_release_message(frappe_version, erpnext_version, chart_version)
    git_tag_repo(chart_version)

def parse_args():
    parser = argparse.ArgumentParser(
        description='helm chart release wizard for ERPNext',
        add_help=True)
    parser.add_argument(
        'version',
        action='store',
        type=str,
        help='Branch suffix after version-??-??: e.g. "12"')
    parser.add_argument(
        'bump_type',
        action='store',
        type=str,
        choices=['major', 'minor', 'patch'],
        help='Bump Type for Helm Chart: e.g. "major", "minor", "patch"')
    return parser.parse_args()


def git_version(service, version, delete_dir=False):
  print(f'Pulling {service} v{version}')
  subprocess.run(
      f'git clone https://github.com/frappe/{service} --branch version-{version} /tmp/{service}',
      shell=True,
      stdout=subprocess.DEVNULL)
  cd = os.getcwd()
  os.chdir(f'/tmp/{service}')
  subprocess.run('git fetch --tags', shell=True)

  # XX-beta becomes XX for tags search
  version = version.split('-')[0]

  version_tag = subprocess.check_output(f'git tag --list --sort=-version:refname "v{version}*" | sed -n 1p | sed -e \'s#.*@\(\)#\\1#\'', shell=True).strip().decode('ascii')
  os.chdir(cd)

  if delete_dir:
      subprocess.run(f'rm -rf /tmp/{service}', shell=True, stdout=subprocess.DEVNULL)

  return version_tag


def get_yaml_file(file_name):
    data_string = None
    try:
        with open(file_name) as f:
            data_string = f.read()
    except Exception as exc:
        print(exc)
        exit(1)
    return data_string


def save_yaml_file(data, file_name):
    with open(file_name, 'w') as f:
        ruamel.yaml.round_trip_dump(data, f)


def update_chart(erpnext_version, bump_type):
    # Update Chart.yaml
    chart_file = f'{os.getcwd()}/erpnext/Chart.yaml'
    chart_string = get_yaml_file(chart_file)
    chart_dict = ruamel.yaml.round_trip_load(chart_string, preserve_quotes=True)

    chart_dict['appVersion'] = erpnext_version
    chart_version = semantic_version.Version(chart_dict['version'])
    if bump_type == 'major':
        chart_version = chart_version.next_major()
    if bump_type == 'minor':
        chart_version = chart_version.next_minor()
    if bump_type == 'patch':
        chart_version = chart_version.next_patch()
    chart_dict['version'] = str(chart_version)

    save_yaml_file(chart_dict, chart_file)
    return chart_dict

def update_values(frappe_version, erpnext_version):
    # Update values.yaml
    values_file = f'{os.getcwd()}/erpnext/values.yaml'
    values_string = get_yaml_file(values_file)
    values_dict = ruamel.yaml.round_trip_load(values_string, preserve_quotes=True)
    values_dict['nginxImage']['tag'] = erpnext_version
    values_dict['pythonImage']['tag'] = erpnext_version
    values_dict['socketIOImage']['tag'] = frappe_version
    save_yaml_file(values_dict, values_file)


def git_check_branch():
    branch = subprocess.check_output(f'git branch', shell=True).decode('utf-8').replace('* ', '')
    if branch != 'master':
        print('Checkout to master branch to release chart')
        exit(1)


def git_tag_repo(version):
    subprocess.run(f'git tag -a {version} -m "Helm Chart v{version}"', shell=True)


def git_commit_release_message(frappe_version, erpnext_version, chart_version):
    commit_message = """Publish

    Helm Chart {chart_version}
    Frappe {frappe_version}
    ERPNext {erpnext_version}""".format(
        chart_version=chart_version,
        frappe_version=frappe_version,
        erpnext_version=erpnext_version)

    subprocess.run(f"git add .", check=True, shell=True)
    subprocess.run(f"git commit -m \"{commit_message}\"", check=True, shell=True)


def git_push_all():
    print('Error: "git push --follow-tags" not working')
    exit(1)
    # subprocess.run('git push --follow-tags', shell=True)


if __name__ == "__main__":
    main()
